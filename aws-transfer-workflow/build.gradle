
plugins {
    id 'brazil-gradle'
    id 'java'
    id 'jacoco'
    id 'necco-gradle-java-defaults'
    id 'com.github.johnrengelman.shadow'
}

def resource_name_with_dashes = 'aws-transfer-workflow'
def schema_file = "${resource_name_with_dashes}.json"

description 'CloudFormation Resource Provider - <AWS::Transfer::Workflow>'

// Include RPDK generated source by `cfn generate`
sourceSets.main.java.srcDir 'target/generated-sources/rpdk'

// Include schema into jar
processResources {
    dependsOn 'copySchema'

    from('target/schema') {
        include schema_file
    }
}

task copySchema(type: Copy) {
    from (projectDir) {
        include schema_file
    }
    into "target/schema"
}

dependencies {
    implementation brazilGradle.build()
    testImplementation brazilGradle.testbuild()

    compileOnly brazilGradle.tool('Lombok')
    testCompileOnly brazilGradle.tool('Lombok')
    annotationProcessor brazilGradle.tool('Lombok')
    testAnnotationProcessor brazilGradle.tool('Lombok')
}

test {
    useJUnitPlatform()
}

// Groovy lazy string evaluation
def cfn_command = "${ -> brazilGradle.path('[AWSCloudFormationRPDKJavaPluginTool]run.runtimefarm') + '/bin/cfn' }"

// Generate RPDK wrapper source before compile
def rpdkGenerateSource = tasks.register('rpdkGenerateSource', Exec) {
    description = 'Generate model sources from schema'

    // Make proper up-to-date-ness for this Exec task
    inputs.file schema_file
    outputs.dirs 'target/generated-sources', 'target/generated-test-sources'

    executable = file(cfn_command)
    args 'generate'
}

compileJava.dependsOn(rpdkGenerateSource)

// Run the tests by default
task release {
    description = 'Build the project and copy the RPDK package to brazil'
    dependsOn(check, assemble)
}

// shadowJar overtakes the jar output location
jar.enabled = false

// Build a shadow jar for resource provider
shadowJar {
    // cfn requires the artifact under target and suffixed with SNAPSHOT.jar
    archiveClassifier = null
    archiveBaseName = "${resource_name_with_dashes}"
    destinationDirectory = file('target')
}

// Use `cfn` to build a RPDK package include resource provider shadow jar, schema etc.
def cfnPackageTaskProvider = tasks.register('cfnPackage', Exec) {
    description = 'Create RPDK package with all resources'

    // Make proper up-to-date-ness for this Exec task
    inputs.files shadowJar.outputs
    outputs.file "${resource_name_with_dashes}.zip"

    executable = file(cfn_command)
    args 'submit', '--dry-run'
}

// Inject internal files into package for further canary and FAS configuration
def rpdkPackageTaskProvider = tasks.register('rpdkPackage', Zip) {
    description = 'Package all internal files with provider archive for deployment'
    dependsOn cfnPackageTaskProvider

    destinationDirectory = file('build/rpdk')
    archiveFileName = "${resource_name_with_dashes}.zip"

    from zipTree(cfnPackageTaskProvider.get().outputs.files.singleFile)
    from ("${rootDir}/${resource_name_with_dashes}") {
        include "settings.internal.json"
        include "canary-bundle/**/*"
        include "contract-tests-artifacts/*"
    }
}

assemble.dependsOn(rpdkPackageTaskProvider)

// Publish the resource provider artifact as project output
// See: https://docs.gradle.org/6.8.3/userguide/cross_project_publications.html#sec:simple-sharing-artifacts-between-projects
configurations {
    cfnPackageArchive
}

artifacts {
    cfnPackageArchive rpdkPackageTaskProvider
}

// Delete target folder for clean
clean {
    delete 'target'
    delete cfnPackage.outputs.files
}
